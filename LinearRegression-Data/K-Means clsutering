import org.apache.log4j.{Logger, Level}
import org.apache.spark.{SparkContext, SparkConf}
import org.apache.spark.mllib.clustering.{KMeans, Kcluster}
import org.apache.spark.mllib.linalg.Vectors
object kMeansClustering {

  def main(args: Array[String]): Unit = {

    System.setProperty("hadoop.home.dir","C:\\Users\\Nick\\Desktop\\hadoop");

    val sparkConf = new SparkConf().setAppName("ClusterK").setMaster("local[*]")

    val sc=new SparkContext(sparkConf)


    Logger.getLogger("org").setLevel(Level.OFF);
    Logger.getLogger("nsig").setLevel(Level.OFF);

    val data = sc.textFile("Desktop/cluster.data")
    val parsedData = data.map(s => Vectors.dense(s.split(' ').map(_.toDouble))).cache()
    parsedData.foreach(f=>println(f))
    val numClusters = 2
    val numIterations = 6
    val clusters = KMeans.train(parsedData, numClusters, numIterations)
    val WSSSE = clusters.computeCost(parsedData)
    println("Within Set Sum of Squared Errors = " + WSSSE)
    println("Training data clustering: ")
    clusters.predict(parsedData).zip(parsedData).foreach(f=>println(f._2,f._1))
    clusters.save(sc, "Desktop/Kcluster")
    val sameModel = KMeansModel.load(sc, "Desktop/Kluster")


  }


}
